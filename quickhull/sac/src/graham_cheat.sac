/* We do the sort through FFI. Cheat, but optimal
   sorting algorithm is different depending on the backend,
   so a high-performance sorting implementation should be in Stdlib. */

use Array: all;
use Benchmarking: all;
use FibreIO: all;
use Math: all;
use StdIO: {print, printf};

#define N 1000000

inline
double[N, 2] swap(double[N, 2] P, int x, int y)
{
  return {[i] -> P[[y]] | [x] <= [i] <[x + 1];
          [i] -> P[[x]] | [y] <= [i] <[y + 1];
          [i] -> P[[i]]};

}

inline 
double orient(double[2] p, double[2] q, double[2] u)
{
  return (p[0] - u[0]) * (q[1] - u[1]) - (p[1] - u[1]) * (q[0] - u[0]);
}

double[n, d:shp] sort(double[n, d:shp] P, double[n] keys)
{
  elem_per_slice = prod(shp);
  old_shape = shape(P);
  P = reshape([prod(shape(P))], P);
  P = MySortDouble(P, keys, elem_per_slice, n);
  return reshape(old_shape, P);
}

#ifdef SAC_BACKEND_CUDA
  external double[.] MySortDouble(double[.] P, double[.] keys, 
                                  int elem_per_slice, int n);
      #pragma linkobj "./sort_gpu.o"
      #pragma linksign [1,1,2,3,4]
      #pragma linkname "MySortDouble"
      #pragma gpumem [0, 1, 2]
#else
  external double[.] MySortDouble(double[.] P, double[.] keys, 
                              int elem_per_slice, int n);
      #pragma linkobj "./sort_cpu.o"
      #pragma linksign [1,1,2,3,4]
      #pragma linkname "MySortDouble"
#endif

inline double L2(double[*] p)
{
  return sqrt(sum(p * p));
}

inline
double GetCos(double[2] p, double[2] lowest)
{
  h = L2(p - lowest);
  a = p[0] - lowest[0];
  return a / h;
}

inline
double[., 2] Graham_sorted(double[N, 2] P)
{
    sp = 2;

    for (counter = 2; counter < N; counter++) {
        while (sp > 0 && orient(P[sp - 1], P[sp], P[counter]) >= 0.0) {
            sp--;
        }
        sp++;
        P[sp] = P[counter];
    }

    return take([sp + 1], P);
}

inline
double[., 2] Graham(double[N, 2] P)
{
    /* 13 GB/s (sequential) */
    argmax = 0;
    for (i = 1; i < N; i++) {
        if ((P[i, 1] < P[argmax, 1]) || 
            (P[i, 1] == P[argmax, 1] && P[i, 0] < P[argmax, 0])) 
        {
            argmax = i;
        }
    }

    P = swap(P, 0, argmax);
    lowest = P[0];
    Pp = drop([1], P);

    keys = {iv -> GetCos(Pp[iv], lowest) | iv < [N - 1]};

    Pp = sort(Pp, keys); 

    P = [lowest]++Pp;

    /* 1.7 GB/s (sequential)
     * Probably bound by branch-misses. */
     return Graham_sorted(P);
}

int main()
{
  P = FibreScanDoubleArray();
  P = reshape([shape(P)[0] / 2, 2], P);

  i_bench = getInterval("bench", 1);
  start(i_bench);
  hull = Graham(P);
  end(i_bench);

  print(shape(hull));

  time, unit = returnResultUnit(i_bench);
  printf("This took %lf ms\n", time * 1e3);
  return 0;
}
