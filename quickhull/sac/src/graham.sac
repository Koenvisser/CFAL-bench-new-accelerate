use Array: all;
use Benchmarking: all;
use FibreIO: all;
use Math: all;
use StdIO: {print, printf};

#define N 1000000

inline
double[N, 2] swap(double[N, 2] P, int x, int y)
{
  return {[i] -> P[[y]] | [x] <= [i] <[x + 1];
          [i] -> P[[x]] | [y] <= [i] <[y + 1];
          [i] -> P[[i]]};

}

inline 
double orient(double[2] p, double[2] q, double[2] u)
{
  return (p[0] - u[0]) * (q[1] - u[1]) - (p[1] - u[1]) * (q[0] - u[0]);
}

double[N, 2] sort(double[N, 2] P)
{
  return P;
}

double[., .] Graham(double[N, 2] P)
{
    /* 13 GB/s (sequential) */
    argmax = 0;
    for (i = 1; i < N; i++) {
        if ((P[i,1] < P[argmax,1]) || 
            (P[i,1] == P[argmax,1] && P[i,0] < P[argmax,0])) 
        {
            argmax = i;
        }
    }

    P = swap(P, 0, argmax);

    P = sort(P); 

    /* 1.7 GB/s (sequential)
     * Probably bound by branch-misses. */
    sp = 2; /* First two elements are always on hull */

    for (counter = 2; counter < N; counter++) {
        while (sp > 0 && orient(P[sp - 1], P[sp], P[counter]) <= 0.0) {
            sp--;
        }
        sp++;
        P[sp] = P[counter];
    }

    return take([sp + 1], P);
}

double[N, 2] CreateQuad()
{
  return {[i] -> [tod(i) / tod(N), (tod(i) / tod(N)) * (tod(i) / tod(N))]
               | [i] < [N]};
}

double[N, 2] CreateHyperbola(double A)
{
  return {[i] -> [tod(i + 1) / tod(N), tod(N) * A / tod(i + 1)]
               | [i] < [N]};
}

int main()
{
  P = FibreScanDoubleArray();
  P = reshape([shape(P)[0] / 2, 2], P);

  i_bench = getInterval("bench", 1);
  start(i_bench);
  hull = Graham(P);
  end(i_bench);

  print(shape(hull));

  time, unit = returnResultUnit(i_bench);
  printf("This took %lf ms\n", time * 1e3);
  return 0;
}
