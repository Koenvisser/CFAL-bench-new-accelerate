use Array: all;
use Benchmarking: all;
use FibreIO: all;
use Math: all;
use StdIO: {print, printf};

#define N 1000000
#define BLOCK 64
#define PI 3.1415926535897932384626433832795028841971693993751058209749445923078164062
#define DBL_MAX 1.79769e+308

inline
double[N, 2] swap(double[N, 2] P, int a, int b)
{
  temp = P[a];
  P[a] = P[b];
  P[b] = temp;
  return P;
}

inline 
double orient(double[2] p, double[2] q, double[2] u)
{
  return (p[0] - u[0]) * (q[1] - u[1]) - (p[1] - u[1]) * (q[0] - u[0]);
}

/* Returns (P', c, argmax) where argmax is u in P with maximal orient(p, q, u),
   [0, c[ with orientation <= 0, and [c, n[ with orientation > 0. */
inline
double[N, 2], int, double[2]
BlockHoare(double[N, 2] P, int l, int r, double[2] p, double[2] q)
{
    r -= 1; // Point to the last element
    argmax = [0d, 0d]; // junk value

    max = -DBL_MAX;
    offsetsl = genarray([BLOCK], 0);
    offsetsr = genarray([BLOCK], 0);
    startl = 0;
    startr = 0;
    numl = 0;
    numr = 0;

    while (r - l > 2 * BLOCK) {
        if (numl == 0) {
            startl = 0;
            /* Sets offsets[0:numl] to the indices that have > 0 */ 
            for (i = 0; i < BLOCK; i++) {
                offsetsl[numl] = i;
                o = orient(p, q, P[l + i]);
                numl += toi(o > 0d);
                if (o > max) {
                    max = o;
                    argmax = P[l + i];
                }
            }
        }
        if (numr == 0) {
            startr = 0;
            /* Sets offsets[0:numr] to the indices that have <= 0 */ 
            for (i = 0; i < BLOCK; i++) {
                offsetsr[numr] = i;
                o = orient(p, q, P[r - i]);
                numr += toi(o <= 0d);
                if (o > max) {
                    max = o;
                    argmax = P[r - i];
                }
            }
        }

        num = (numl < numr) ? numl : numr;

        for (j = 0; j < num; j++) {
            P = swap(P, l + offsetsl[startl + j], r - offsetsr[startr + j]);
        }

        numl -= num;
        numr -= num;
        startl += num;
        startr += num;

        if (numl == 0) l += BLOCK;
        if (numr == 0) r -= BLOCK;
    }

    while (l <= r) {
        o = orient(p, q, P[l]);
        if (o > max) {
          max = o;
          argmax = P[l];
        }
        while (o <= 0d && l <= r) {
            l++;
            o = orient(p, q, P[l]);
          if (o > max) {
            max = o;
            argmax = P[l];
          }
        }

        o = orient(p, q, P[r]);
        if (o > max) {
          max = o;
          argmax = P[r];
        }
        while (o > 0d && l <= r) {
            r--;
            o = orient(p, q, P[r]);
            if (o > max) {
              max = o;
              argmax = P[r];
            }
        }

        if (l < r) {
            P = swap(P, l, r);
        }
    }

    return (P, l, argmax);
}

inline
double[2] min_x(double[2] a, double[2] b)
{
  return (a[0] < b[0] || (a[0] == b[0] && a[1] <= b[1])) ? a : b;
}

inline
double[2] max_x(double[2] a, double[2] b)
{
  return (a[0] > b[0] || (a[0] == b[0] && a[1] >= b[1])) ? a : b;
}

double[., .] QuickHull(double[N, 2] P)
{
  hull = genarray(shape(P), 0d);

  /* Find the points with left-most and right-most x-coordinate.
   * (In case of ties, with bottom and top y-coordinate.)
   * These are guaranteed to be on the convex hull, and will be our
   * first bisection. */
  left = 0;
  right = 0;
  for (i = 1; i < shape(P)[0]; i++) {
      if (P[i, 0] == P[left, 0]) {
          left = (P[i, 1] < P[left, 1]) ? i : left;
      } else if (P[i, 0] < P[left, 0]) {
          left = i; 
      } else if (P[i, 0] == P[right, 0]) {
          right = (P[i, 1] > P[right, 1]) ? i : right;
      } else if (P[i, 0] > P[right, 0]) {
          right = i;
      }
  }
  p = P[left];
  q = P[right];

//  p, q = with {
//    ([0] <= iv < [N]): (P[iv], P[iv]);
//  }: (fold(min_x, P[0]), fold(max_x, P[0]));

  hull[0] = p;

  P, c, r1 = BlockHoare(P, 0, N, p, q);
  P, lcount, hull = FindHull(P, c, N, p, q, r1, hull, 1);

  hull[lcount + 1] = q;

  P, c2, r2 = BlockHoare(P, 0, c, q, p);
  P, rcount, hull = FindHull(P, c2, c, q, p, r2, hull, lcount + 2);

  return take([lcount + rcount + 2], hull);
}

inline
double[N, 2], int, double[N, 2]
FindHull(double[N, 2] P, int lo, int hi, double[2] p, double[2] q, 
         double[2] rk, double[N, 2] hull, int hull_count)
{
  int count;
  if (lo != hi)  {
    P, c, t1 = BlockHoare(P, lo, hi, p, rk);
    P, lcount, hull = FindHull(P, c, hi, p, rk, t1, hull, hull_count);

    hull[lcount] = rk;

    P, c2, t2 = BlockHoare(P, lo, c, rk, q);
    P, rcount, hull = FindHull(P, c2, c, rk, q, t2, 
                               hull, hull_count + lcount + 1);

    count = 1 + lcount + rcount;
    } else {
      count = 0;
    }
  
  return (P, count, hull);
}

double[N, 2] CreateCircle()
{
  return {[i] -> [cos(tod(2 * i) * PI / tod(N)), 
                  sin(tod(2 * i) * PI / tod(N))]
               | [i] < [N]};
}

double[N, 2] CreateQuad()
{
  return {[i] -> [tod(i) / tod(N), (tod(i) / tod(N)) * (tod(i) / tod(N))]
               | [i] < [N]};
}

double[N, 2] CreateHyperbola(double A)
{
  return {[i] -> [tod(i + 1) / tod(N), tod(N) * A / tod(i + 1)]
               | [i] < [N]};
}

int main()
{
  P = FibreScanDoubleArray();
  P = reshape([shape(P)[0] / 2, 2], P);

  i_bench = getInterval("bench", 1);
  start(i_bench);
  hull = QuickHull(P);
  end(i_bench);

  print(shape(hull));

  time, unit = returnResultUnit(i_bench);
  printf("This took %lf ms\n", time * 1e3);
  return 0;
}
