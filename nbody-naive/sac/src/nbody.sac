use Array: all;
use Math: all;
use StdIO: all;
use Benchmarking: all;

inline
double l2norm(double x, double y, double z)
{
    return sqrt(x * x + y * y + z * z);
}

inline
double pow3(double x)
{
  return x * x * x;
}

inline
double, double, double acc(double x, double y, double z, 
                           double x2, double y2, double z2, 
                           double m)
{
   dirx = x2 - x;
   diry = y2 - y;
   dirz = z2 - z;
   factor = (l2norm(dirx, diry, dirz) == 0d) ? 
        0d : m / pow3(l2norm(dirx, diry, dirz));
   return (dirx * factor, diry * factor, dirz * factor);
}

noinline
double[N], double[N], double[N] 
acc_v(double[N] px, double[N] py, double[N] pz, 
      double[N] pxs, double[N] pys, double[N] pzs, double[N] ms)
{
   ax, ay, az =  with {
                   (. <= [i] <= .) {
                     x, y, z = with {
                                 ([0] <= [j] < [N]) {
                                   bx, by, bz = acc(px[i], py[i], pz[i], 
                                                    pxs[j], pys[j], pzs[j], 
                                                    ms[j]);
                                  } : (bx, by, bz);
                               }: (fold (+, 0.0), fold (+, 0.0), fold (+, 0.0));
                   }: (x, y, z);
                 }: (genarray([N], 0.0), genarray([N], 0.0), genarray([N], 0.0));
   return (ax, ay, az);
}

inline
double[N, 3], double[N, 3]
advance(double[N, 3] positions, double[N, 3] velocities, double[N] masses,
        double dt)
{
  /* Why do I need to rename positions2? */
  positions2 = transpose(positions);

  accelx, accely, accelz = acc_v(positions2[0], positions2[1], positions2[2],
                                 positions2[0], positions2[1], positions2[2],
                                 masses);

  positions = transpose(positions2);

  accelerations = {iv -> [accelx[iv], accely[iv], accelz[iv]]};

  velocities += accelerations;
  positions += velocities * dt;

  return (positions, velocities);
}

int main()
{
    itime = getInterval("time", 1);
    start(itime);

    positions = {[i] -> [0d, tod(i), tod(i)] | [i] < [N]};
    velocities = genarray([N, 3], 0d);
    masses = {[i] -> 1d | [i] < [N]};

    for (t = 0; t < ITER; t++) {
      positions, velocities = advance(positions, velocities, masses, 0.01);
    }

    end(itime);

    fprintf(stderr, "Sum is %lf\n", sum(positions));
    print(positions);

    time, unit = returnResultUnit(itime);
    fprintf(stderr, "This took %f%s.\n", time, unit);
    printf("%f\n", 
        (18.0 * tod(N) * tod(N) + 12.0 * tod(N)) * tod(ITER) / 1e9 / time);

    return 0;
}
