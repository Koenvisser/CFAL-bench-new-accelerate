use Array: all;
use Math: all;
use StdIO: all;
use Benchmarking: all;

#define EPSILON 0.000000001

inline
double[*] sum_outer( double[+] a)
{
  return with {
    ([0] <= iv < take([1], shape(a))): a[iv];
  } : fold(+, genarray(drop([1], shape(a)), 0d));
}

inline
double sicsaL2Norm(double[.] x)
{
  /* TODO currently this calls to GLIBC instead of directly doing
   * assembly instruction vsqrtd.

   * The C version gets 10 Gflops/s sequentially, this one 2. */
  return sqrt(sum(x * x) + EPSILON);
}

inline
double[3] acceleration(double[3] pos1, double[3] pos2, double mass)
{
  n = sicsaL2Norm(pos2 - pos1);
  return (pos2 - pos1) * mass / (n * n * n);
}

inline
double[3] acceleration(double[3] pos, double[N, 3] positions, double[N] masses)
{
  /* With sum_outer we get a complaint for GPU 'not in perfect nested position' */
  acc = [0d, 0d, 0d];
  for (j = 0; j < N; j++) {
    acc += acceleration(pos, positions[j], masses[j]);
  }
  return acc;
//  return sum_outer({jv -> acceleration(pos, positions[jv], masses[jv])});
}

inline
double[N, 3], double[N, 3]
advance(double[N, 3] positions, double[N, 3] velocities, double[N] masses,
        double dt)
{
  accelerations = {iv -> acceleration(positions[iv], positions, masses)
                      | iv < [N]};
  velocities += accelerations * dt;
  positions += velocities * dt;

  return (positions, velocities);
}

int main()
{
    itime = getInterval("time", 1);
    start(itime);

    positions = {[i] -> [tod(i), tod(i), tod(i)] | [i] < [N]};
    velocities = genarray([N, 3], 0d);
    masses = {[i] -> 1d | [i] < [N]};

    for (t = 0; t < ITER; t++) {
      positions, velocities = advance(positions, velocities, masses, 0.01);
    }

    end(itime);

    print(sum(positions));

    time, unit = returnResultUnit(itime);
    printf("This took %f%s.\n", time, unit);
    printf("Compute rate: %f Gflops/%s.\n",
              3.0 * 16.0 * tod(N) * tod(N) * tod(ITER) / 1e9 / time, unit);

    return 0;
}
