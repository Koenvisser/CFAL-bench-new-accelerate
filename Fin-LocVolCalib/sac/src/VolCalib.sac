use Array: all;
use Math: all;
use StdIO: all;
use Benchmarking: all;

#define REAL double
#define tor tod

/**
 * Initializes VarX as outer product of VarX1 and VarX2.
 */
REAL[NUM_Y], REAL[NUM_X] updateParams(REAL[NUM_X] X, REAL[NUM_Y] Y, REAL t)
{
  VarX1 = {[j] -> exp(2.0 * Y[j] - NU * NU * t)};
  VarX2 = {[i] -> pow(X[i], 2.0 * BETA)};

  return (VarX1, VarX2);
}

inline REAL dxu(REAL[.] xx, int i)
{
  return xx[i] - xx[i - 1];
}

inline REAL dxl(REAL[.] xx, int i)
{
  return xx[i + 1] - xx[i];
}

/**
 * Initializes indX, indY, X, Y, Dxx, Dyy
 */
inline
int, int, REAL[NUM_X], REAL[NUM_Y], REAL[NUM_X, 3], REAL[NUM_Y, 3], 
REAL[NUM_X, 3], REAL[NUM_Y, 3]
initGrid()
{
  stdX = 20.0 * ALPHA * S0 * sqrt(T);
  dx = stdX / tor(NUM_X);
  indX = toi(S0 / dx);
  X = {[i] -> tor(i) * dx - tor(indX) * dx + S0 | [i] < [NUM_X]};
  Dx = {[i] -> [tor(0), 1.0 / (X[1] - X[0]), 1.0 / (X[1] - X[0])]
            | [0] <= [i] < [1];
        [i] -> [-dxu(X, i) / dxl(X, i) / (dxl(X, i) + dxu(X, i)),
                (dxu(X, i) / dxl(X, i) - dxl(X, i) / dxu(X, i)) / (dxl(X, i) + dxu(X, i)),
                dxu(X, i) / dxl(X, i) / (dxl(X, i) + dxu(X, i))]
            | [1] <= [i] < [NUM_X - 1];
        [i] -> [-1.0 / (X[NUM_X - 1] - X[NUM_X - 2]), 1.0 / (X[NUM_X - 1] - X[NUM_X - 2]), tor(0)]
            | [NUM_X - 1] <= [i] < [NUM_X]};

  Dxx = {[i] -> [ 2.0 / dxl(X, i) / (dxl(X, i) + dxu(X, i)),
                 -2.0 * (1.0 / dxl(X, i) + 1.0 / dxu(X, i)) / (dxl(X, i) + dxu(X, i)),
                  2.0 / dxu(X, i) / (dxl(X, i) + dxu(X, i))]
              | [1] <= [i] < [NUM_X - 1];
          [i] -> [tor(0), tor(0), tor(0)]
              | [NUM_X - 1] <= [i] < [NUM_X]};

  stdY = 10.0 * NU * sqrt(T);
  dy = stdY / tor(NUM_Y);
  indY = NUM_Y / 2;

  Y = {[i] -> tor(i) * dy - tor(indY) * dy + log(ALPHA)
            | [i] < [NUM_Y]};
  Dy = {[i] -> [tor(0), 1.0 / (Y[1] - Y[0]), 1.0 / (Y[1] - Y[0])]
            | [0] <= [i] < [1];
        [i] -> [-dxu(Y, i) / dxl(Y, i) / (dxl(Y, i) + dxu(Y, i)),
                (dxu(Y, i) / dxl(Y, i) - dxl(Y, i) / dxu(Y, i)) / (dxl(Y, i) + dxu(Y, i)),
                dxu(Y, i) / dxl(Y, i) / (dxl(Y, i) + dxu(Y, i))]
            | [1] <= [i] < [NUM_Y - 1];
        [i] -> [-1.0 / (Y[NUM_Y - 1] - Y[NUM_Y - 2]), 1.0 / (Y[NUM_Y - 1] - Y[NUM_Y - 2]), tor(0)]
            | [NUM_Y - 1] <= [i] < [NUM_Y]};
  Dyy = {[i] -> [ 2.0 / dxl(Y, i) / (dxl(Y, i) + dxu(Y, i)),
                 -2.0 * (1.0 / dxl(Y, i) + 1.0 / dxu(Y, i)) / (dxl(Y, i) + dxu(Y, i)),
                  2.0 / dxu(Y, i) / (dxl(Y, i) + dxu(Y, i))]
              | [1] <= [i] < [NUM_Y - 1];
          [i] -> [tor(0), tor(0), tor(0)]
              | [NUM_Y - 1] <= [i] < [NUM_Y]};

  return (indX, indY, X, Y, Dxx, Dyy, Dx, Dy);
}

/* TODO we have a whole system of these, so vectorize */
inline 
REAL[.] tridag(REAL[.] a, REAL[.] b, REAL[.] c, REAL[.] y)
{
  n = shape(y)[0];

  /* This is the modified Thomas method from Numerical Methods.
   * Note that the non-zeroes in a row are a, b, c in this application,
   * and b, a, c in Numerical Methods.
   * We store gamma in b. */
  b[0] = 1.0 / b[0];
  y[0] = b[0] * y[0];

  for (i = 1; i < n; i++) {
      b[i] = 1.0 / (b[i] - a[i] * b[i - 1] * c[i - 1]);
      y[i] = b[i] * (y[i] - a[i] * y[i - 1]);
  }

  for (i = n - 2; i >= 1; i--) {
      y[i] = y[i] - b[i] * c[i] * y[i + 1];
  }

  return y;
}

inline
REAL[NUM_X] implicit_x(REAL VarX1, REAL[NUM_X] VarX2, REAL[NUM_X, 3] Dxx,
                   REAL dtInv, REAL[NUM_X] uu)
{
  a = {[j] -> -0.25 * VarX1 * VarX2[j] * Dxx[j, 0] | [1] <= [j] < [NUM_X - 1];
       [j] -> 0d                                | [NUM_X - 1] <= [j] < [NUM_X]}; 

  return tridag(a, dtInv - 2d * a, a, uu); 
}

inline
REAL[NUM_Y] implicit_y(REAL[NUM_Y] VarY, REAL[NUM_Y, 3] Dyy, REAL dtInv,
                       REAL[NUM_Y] yy)
{
  a = {[j] -> -0.25 * VarY[j] * Dyy[j, 0] | [1] <= [j] < [NUM_Y - 1];
       [j] -> 0d                    | [NUM_Y - 1] <= [j] < [NUM_Y]}; 

  return tridag(a, dtInv - 2d * a, a, yy);
}

inline
REAL[NUM_X, NUM_Y] rollback(REAL dtInv, REAL[NUM_X, 3] Dxx,
                            REAL[NUM_X] X, REAL[NUM_Y] Y, int t,
                            REAL[NUM_Y, 3] Dyy, REAL VarY,
                            REAL[NUM_X, NUM_Y] ResultE)
{
  return ResultE;
}

inline
REAL value(REAL strike, int indX, int indY,
           REAL[NUM_X] X, REAL[NUM_Y] Y,
           REAL[NUM_X, 3] Dxx, REAL[NUM_Y, 3] Dyy, 
           REAL[NUM_X, 3] Dx, REAL[NUM_Y, 3] Dy)
{
  MuX = with {}: genarray([NUM_Y, NUM_X], tor(0));
  MuY = with {}: genarray([NUM_X, NUM_Y], tor(0));
  VarY = with {}: genarray([NUM_X, NUM_Y], NU * NU);

  ResultE = {[i, j] -> max(X[i] - strike, 0.0) | [i, j] < [NUM_X, NUM_Y]};

  for (t = NUM_T - 2; t >= 0; t--) {
    dtInv = tor(NUM_T - 1) / T;

    VarX1, VarX2 = updateParams(X, Y, T * tor(t) / tor(NUM_T - 1));
  
    /* explicit y */
    V = {[i, j] -> sum({[k] -> MuY[i, j] * Dy[j, k] + 
                               0.5 * ResultE[i, j - 1 + k] * 
                                    VarY[i, j] * Dyy[j, k]
                            | [0] <= [k] < [3]})
                 | [0, 1] <= [i, j] < [NUM_X, NUM_Y - 1];
         [i, j] -> 0d
                 | [0, NUM_Y - 1] <= [i, j] < [NUM_X, NUM_Y]
        };
  
    /* explicit x */
    U = {[j, i] -> dtInv * ResultE[i, j]
                 | [0, 0] <= [j, i] < [NUM_Y, 1];
         [j, i] -> dtInv * ResultE[i, j] + 0.5 *
                    sum({[k] -> MuX[j, i] * Dx[i, k] + 
                                0.5 * ResultE[i - 1 + k, j] *
                                VarX1[j] * VarX2[i] * Dxx[i, k]
                              | [0] <= [k] < [3]})
                 | [0, 1] <= [j, i] < [NUM_Y, NUM_X - 1];
         [j, i] -> dtInv * ResultE[i, j]
                 | [0, NUM_X - 1] <= [j, i] < [NUM_Y, NUM_X]
         };
  
    U = {[j, i] -> U[j, i] + V[i, j]};
  
    /* implicit x */
    U = {[j] -> implicit_x(VarX1[j], VarX2, Dxx, dtInv, U[j])};
  
    /* implicit y */
    ResultE = {[i] -> implicit_y(VarY[i], Dyy, dtInv,
                        {[j] -> dtInv * U[j, i] - V[i, j] / 2.0})};
  }

  return ResultE[indX, indY];
}

int main()
{
  fprintf(stdout, "\n// SaC Volatility Calibration Benchmark:\n");

  itime = getInterval("time", 1);
  start(itime);
  indX, indY, X, Y, Dxx, Dyy, Dx, Dy = initGrid();

  result = {[i] -> value(tor(i) / 1000.0, indX, indY, X, Y, Dxx, Dyy, Dx, Dy)
                 | [i] < [OUTER]};
  end(itime);
  print(result);

  time, unit = returnResultUnit(itime);
  printf("This took %f%s.\n", time, unit);

  return 0;
}
