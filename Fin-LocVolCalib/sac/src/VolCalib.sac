use Array: all;
use Math: all;
use StdIO: all;
use Benchmarking: all;

#define REAL double
#define TO_REAL tod

/**
 * Initializes VarX as outer product of VarX1 and VarX2.
 */
REAL[.], REAL[.] updateParams(REAL[.] X, REAL[.] Y, REAL t)
{
  VarX1 = {[j] -> exp(2.0 * Y[j] - NU * NU * t)};
  VarX2 = {[i] -> pow(X[i], 2.0 * BETA)};

  return (VarX1, VarX2);
}

/**
 * Initializes indX, indY and X, Y, Time
 */
inline
int, int, REAL[.], REAL[.], REAL[.] initGrid()
{
  Time = {[i] -> T * TO_REAL(i) / TO_REAL(NUM_T - 1) | [i] < [NUM_T]};
  stdX = 20.0 * ALPHA * S0 * sqrt(T);
  dx = stdX / TO_REAL(NUM_X);
  indX = toi(S0 / dx);
  X = {[i] -> TO_REAL(i) * dx - TO_REAL(indX) * dx + S0 | [i] < [NUM_X]};

  stdY = 10.0 * NU * sqrt(T);
  dy = stdY / TO_REAL(NUM_Y);
  indY = NUM_Y / 2;

  Y = {[i] -> TO_REAL(i) * dy - TO_REAL(indY) * dy + log(ALPHA)
            | [i] < [NUM_Y]};

  return (indX, indY, X, Y, Time);
}

/**
 * Initializes Globals:
 *      (i) Dxx when called with X
 *     (ii) Dyy when called with Y
 */
REAL[3] initDD(REAL dxl, REAL dxu)
{
  return [ 2.0 / dxl / (dxl + dxu),
          -2.0 * (1.0 / dxl + 1.0 / dxu) / (dxl + dxu),
           2.0 / dxu / (dxl + dxu)];
}

REAL[., .] initOperator(REAL[.] xx)
{
  n = shape(xx)[0];

  zero = [0.0, 0.0, 0.0];

  DD = {[i] -> zero
            | [0] <= [i] < [1];
        [i] -> initDD(xx[i] - xx[i - 1], xx[i + 1] - xx[i])
            | [1] <= [i] < [n - 1];
        [i] -> zero
            | [n - 1] <= [i] < [n]};

  return DD;
}

REAL[., .] setPayoff(REAL strike, REAL[.] X)
{
  return {[i, j] -> max(X[i] - strike, 0.0) | [i, j] < [NUM_X, NUM_Y]};
}

inline REAL[.] tridag(REAL[.] a, REAL[.] b, REAL[.] c, REAL[.] y)
{
  n = shape(y)[0];

  /* This is the modified Thomas method from Numerical Methods.
   * Note that the non-zeroes in a row are a, b, c in this application,
   * and b, a, c in Numerical Methods.
   * We store gamma in b. */
  b[0] = 1.0 / b[0];
  y[0] = b[0] * y[0];

  for (i = 1; i < n; i++) {
      b[i] = 1.0 / (b[i] - a[i] * b[i - 1] * c[i - 1]);
      y[i] = b[i] * (y[i] - a[i] * y[i - 1]);
  }

  for (i = n - 2; i >= 0; i--) {
      y[i] = y[i] - b[i] * c[i] * y[i + 1];
  }

  return y;
}

specialize REAL[NUM_X] implicit_x(REAL VarX1, REAL[NUM_X] VarX2,
                                  REAL[NUM_X, 3] Dxx, REAL dtInv,
                                  REAL[NUM_X] uu);
REAL[.] implicit_x(REAL VarX1, REAL[.] VarX2, REAL[., .] Dxx,
                   REAL dtInv, REAL[.] uu)
{
  a = {[i] -> -0.25 * VarX1 * VarX2[i] * Dxx[i, 0]};
  b = {[i] -> dtInv - 0.25 * VarX1 * VarX2[i] * Dxx[i, 1]};
  c = {[i] -> -0.25 * VarX1 * VarX2[i] * Dxx[i, 2]};

  return tridag(a, b, c, uu);
}

specialize REAL[NUM_Y] implicit_y(REAL VarY, REAL[NUM_Y, 3] Dyy,
                                  REAL dtInv, REAL[NUM_Y] yy);
REAL[.] implicit_y(REAL VarY, REAL[., .] Dyy, REAL dtInv, REAL[.] yy)
{
  a = {[j] -> -0.25 * VarY * Dyy[j, 0]};
  b = {[j] -> dtInv - 0.25 * VarY * Dyy[j, 1]};
  c = {[j] -> -0.25 * VarY * Dyy[j, 2]};

  return tridag(a, b, c, yy);
}

specialize REAL[NUM_X, NUM_Y] rollback(REAL dtInv,
                    REAL[NUM_X, 3] Dxx, REAL[NUM_Y] VarX1, REAL[NUM_X] VarX2,
                    REAL[NUM_Y, 3] Dyy, REAL VarY,
                    REAL[NUM_X, NUM_Y] ResultE);
REAL[., .] rollback(REAL dtInv,
                    REAL[., .] Dxx,
                    REAL[.] VarX1, REAL[.] VarX2,
                    REAL[., .] Dyy, REAL VarY,
                    REAL[., .] ResultE)
{
  /* explicit x */
  /*  FIXME letting the compiler infer the bounds on k causes a segfault.
  U = {[j, i] -> dtInv * ResultE[i, j] + 0.25 *
                  sum({[k] -> ResultE[i - 1 + k, j] *
                              VarX1[j] * VarX2[i] * Dxx[i, k]})};
  */
  U = {[j, i] -> dtInv * ResultE[i, j] + 0.25 *
                  sum({[k] -> ResultE[i - 1 + k, j] *
                              VarX1[j] * VarX2[i] * Dxx[i, k]
                            | [1] <= [k] < [3]})
               | [0, 0] <= [j, i] < [NUM_Y, 1];
       [j, i] -> dtInv * ResultE[i, j] + 0.25 *
                  sum({[k] -> ResultE[i - 1 + k, j] *
                              VarX1[j] * VarX2[i] * Dxx[i, k]
                            | [0] <= [k] < [3]})
               | [0, 1] <= [j, i] < [NUM_Y, NUM_X - 1];
       [j, i] -> dtInv * ResultE[i, j] + 0.25 *
                  sum({[k] -> ResultE[i - 1 + k, j] *
                              VarX1[j] * VarX2[i] * Dxx[i, k]
                            | [0] <= [k] < [2]})
               | [0, NUM_X - 1] <= [j, i] < [NUM_Y, NUM_X]
       };

  /* explicit y */
  /* FIXME letting the compiler infer the bounds on k gives the correct result,
     but -ecc says a negativity constraint is violated, so this is good luck.
  V = {[i, j] -> 0.5 * sum({[k] -> ResultE[i, j - 1 + k] * VarY * Dyy[j, k]})};
  */
  V = {[i, j] -> 0.5 * sum({[k] -> ResultE[i, j - 1 + k] * VarY * Dyy[j, k]
                                | [1] <= [k] < [3]})
               | [0, 0] <= [i, j] < [NUM_X, 1];
       [i, j] -> 0.5 * sum({[k] -> ResultE[i, j - 1 + k] * VarY * Dyy[j, k]
                                 | [0] <= [k] < [3]})
               | [0, 1] <= [i, j] < [NUM_X, NUM_Y - 1];
        [i, j] -> 0.5 * sum({[k] -> ResultE[i, j - 1 + k] * VarY * Dyy[j, k]
                                  | [0] <= [k] < [2]})
               | [0, NUM_Y - 1] <= [i, j] < [NUM_X, NUM_Y]
      };

  U = {[j, i] -> U[j, i] + V[i, j]};

  /* implicit x */
  U = {[j] -> implicit_x(VarX1[j], VarX2, Dxx, dtInv, U[j])};

  /* implicit y */
  ResultE = {[i] -> implicit_y(VarY, Dyy, dtInv,
                      {[j] -> dtInv * U[j, i] - V[i, j] / 2.0})};

  return ResultE;
}

/* indX, indY, X, Y, Time, Dxx, Dyy don't depend on the index value of result,
   and can be lifted out. VarX1, VarX2 differ along iterations of value, but
   are independent of the index value of result.
   */
specialize REAL value(REAL strike, int indX, int indY,
           REAL[NUM_X] X, REAL[NUM_Y] Y, REAL[NUM_T] Time,
           REAL[NUM_X, 3] Dxx, REAL[NUM_Y, 3] Dyy);
REAL value(REAL strike, int indX, int indY,
           REAL[.] X, REAL[.] Y, REAL[.] Time,
           REAL[., .] Dxx, REAL[., .] Dyy)
{
  ResultE = setPayoff(strike, X);

  for (t = NUM_T - 2; t >= 0; t--) {
    /* VarX1 does not depend on t, so it should be lifted out of this loop,
       and then lifted out of the with-loop. */
    VarX1, VarX2 = updateParams(X, Y, Time[t]);

    ResultE = rollback(1.0 / (Time[t + 1] - Time[t]),
                       Dxx, VarX1, VarX2,
                       Dyy, NU * NU,
                       ResultE);
  }

  return ResultE[indX, indY];
}

int main()
{
    fprintf(stdout, "\n// SaC Volatility Calibration Benchmark:\n");

    itime = getInterval("time", 1);
    start(itime);
    indX, indY, X, Y, Time = initGrid();

    Dxx = initOperator(X);
    Dyy = initOperator(Y);

    result = {[i] -> value(TO_REAL(i) / 1000.0, indX, indY, X, Y, Time,
                           Dxx, Dyy)
                   | [i] < [OUTER]};
    end(itime);
    print(result);

    time, unit = returnResultUnit(itime);
    printf("This took %f%s.\n", time, unit);

    return 0;
}
