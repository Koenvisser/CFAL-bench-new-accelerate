use Array: all;
use Math: all;
use StdIO: all;
use Benchmarking: all;

#define REAL double
#define tor tod

double L2(double[*] x)
{
  return sqrt(sum(x * x));
}

void Print(double[m, n] x)
{
    for (i = 0; i < m; i++) {
        for (j = 0; j < n; j++) {
            printf("%.17e ", x[i, j]);
        }
        printf("\n");
    }
}

void Print(double[m] x)
{
    for (i = 0; i < m; i++) {
        printf("%.17e ", x[i]);
        printf("\n");
    }
}

REAL[NUM_Y, NUM_X] updateParams(REAL[NUM_X] X, REAL[NUM_Y] Y, REAL t)
{
/* (faster, memory efficient,  and more stable is to see it as an 
 * outer-product VarX1[j] * VarX2[i]
 * VarX1 = {[j] -> exp(2.0 * Y[j] - NU * NU * t)};
 * VarX2 = {[i] -> pow(X[i], 2.0 * BETA)};
 **/

  return {[j, i] -> exp(2.0 * (BETA * log(X[i]) + Y[j] - 0.5 * NU * NU * t))};
}

inline REAL dxl(REAL[.] xx, int i)
{
  return xx[i] - xx[i - 1];
}

inline REAL dxu(REAL[.] xx, int i)
{
  return xx[i + 1] - xx[i];
}

/**
 * Initializes indX, indY, X, Y, Dxx, Dyy
 */
inline
int, int, REAL[NUM_X], REAL[NUM_Y], REAL[NUM_X, 3], REAL[NUM_Y, 3], 
REAL[NUM_X, 3], REAL[NUM_Y, 3]
initGrid()
{
  stdX = 20.0 * ALPHA * S0 * sqrt(T);
  dx = stdX / tor(NUM_X);
  indX = toi(S0 / dx);

  X = {[i] -> tor(i) * log(tor(i) + 1.0) - tor(indX) * dx + S0
            | [i] < [NUM_X]};

  Dx = {[i] -> [tor(0), -1.0 / (X[1] - X[0]), 1.0 / (X[1] - X[0])]
            | [0] <= [i] < [1];
        [i] -> [-dxu(X, i) / dxl(X, i) / (dxl(X, i) + dxu(X, i)),
                (dxu(X, i) / dxl(X, i) - dxl(X, i) / dxu(X, i)) / (dxl(X, i) + dxu(X, i)),
                dxl(X, i) / dxu(X, i) / (dxl(X, i) + dxu(X, i))]
            | [1] <= [i] < [NUM_X - 1];
        [i] -> [-1.0 / (X[NUM_X - 1] - X[NUM_X - 2]), 1.0 / (X[NUM_X - 1] - X[NUM_X - 2]), tor(0)]
            | [NUM_X - 1] <= [i] < [NUM_X]};

//  Dx = {[i] -> [tor(0), -1.0 / (X[1] - X[0]), 1.0 / (X[1] - X[0])]
//            | [0] <= [i] < [1];
//        [i] -> [-dxu(X, i) / (dxl(X, i) * (X[i + 1] - X[i - 1])),
//                (dxu(X, i) - dxl(X, i)) / (dxu(X, i) * dxl(X, i)),
//                 dxl(X, i) / (dxu(X, i) * (X[i + 1] - X[i - 1]))]
//            | [1] <= [i] < [NUM_X - 1];
//        [i] -> [-1.0 / (X[NUM_X - 1] - X[NUM_X - 2]), 1.0 / (X[NUM_X - 1] - X[NUM_X - 2]), tor(0)]
//            | [NUM_X - 1] <= [i] < [NUM_X]};

  Dxx = {[i] -> [ 2.0 / dxl(X, i) / (dxl(X, i) + dxu(X, i)),
                 -2.0 * (1.0 / dxl(X, i) + 1.0 / dxu(X, i)) / (dxl(X, i) + dxu(X, i)),
                  2.0 / dxu(X, i) / (dxl(X, i) + dxu(X, i))]
              | [1] <= [i] < [NUM_X - 1];
          [i] -> [tor(0), tor(0), tor(0)]
              | [NUM_X - 1] <= [i] < [NUM_X]};

//  Dxx = {[i] -> [ 2.0 / (dxl(X, i) * (X[i + 1] - X[i - 1])),
//                 -2.0 / (dxu(X, i) * dxl(X, i)),
//                  2.0 / (dxu(X, i) * (X[i + 1] - X[i - 1]))]
//              | [1] <= [i] < [NUM_X - 1];
//          [i] -> [tor(0), tor(0), tor(0)]
//              | [NUM_X - 1] <= [i] < [NUM_X]};

  stdY = 10.0 * NU * sqrt(T);
  dy = stdY / tor(NUM_Y);
  indY = NUM_Y / 2;
  y_constant = -tor(indY) * dy + log(ALPHA);

  Y = {[i] -> tor(i) * log(tor(i + 1)) * dy + y_constant
            | [i] < [NUM_Y]};
  Dy = {[i] -> [tor(0), -1.0 / (Y[1] - Y[0]), 1.0 / (Y[1] - Y[0])]
            | [0] <= [i] < [1];
        [i] -> [-dxu(Y, i) / dxl(Y, i) / (dxl(Y, i) + dxu(Y, i)),
                (dxu(Y, i) / dxl(Y, i) - dxl(Y, i) / dxu(Y, i)) / (dxl(Y, i) + dxu(Y, i)),
                dxl(Y, i) / dxu(Y, i) / (dxl(Y, i) + dxu(Y, i))]
            | [1] <= [i] < [NUM_Y - 1];
        [i] -> [-1.0 / (Y[NUM_Y - 1] - Y[NUM_Y - 2]), 1.0 / (Y[NUM_Y - 1] - Y[NUM_Y - 2]), tor(0)]
            | [NUM_Y - 1] <= [i] < [NUM_Y]};

  Dyy = {[i] -> [ 2.0 / dxl(Y, i) / (dxl(Y, i) + dxu(Y, i)),
                 -2.0 * (1.0 / dxl(Y, i) + 1.0 / dxu(Y, i)) / (dxl(Y, i) + dxu(Y, i)),
                  2.0 / dxu(Y, i) / (dxl(Y, i) + dxu(Y, i))]
              | [1] <= [i] < [NUM_Y - 1];
          [i] -> [tor(0), tor(0), tor(0)]
              | [NUM_Y - 1] <= [i] < [NUM_Y]};

  return (indX, indY, X, Y, Dxx, Dyy, Dx, Dy);
}

inline 
REAL[.] tridag(REAL[.] a, REAL[.] b, REAL[.] c, REAL[.] y)
{
#if 0
  n = shape(y)[0];

  /* This is the modified Thomas method from Numerical Methods.
   * Note that the non-zeroes in a row are a, b, c in this application,
   * and b, a, c in Numerical Methods.
   * We store gamma in b. */
  b[0] = 1.0 / b[0];
  y[0] = b[0] * y[0];

  for (i = 1; i < n; i++) {
      b[i] = 1.0 / (b[i] - a[i] * b[i - 1] * c[i - 1]);
      y[i] = b[i] * (y[i] - a[i] * y[i - 1]);
  }

  for (i = n - 2; i >= 1; i--) {
      y[i] = y[i] - b[i] * c[i] * y[i + 1];
  }

  return y;
#else
    n = shape(y)[0];

    // forward swap
    for (i=1; i<n-1; i++) {
        beta = a[i] / b[i-1];

        b[i] = b[i] - beta*c[i-1];
        y[i] = y[i] - beta*y[i-1];
    }    

    // backward swap
    y[n-1] = y[n-1]/b[n-1];
    for(i=n-2; i>=0; i--) {
        y[i] = (y[i] - c[i]*y[i+1]) / b[i]; 
    }

    return y;
#endif
}

inline
REAL[NUM_X] implicit_x(REAL[NUM_X] MuX, REAL[NUM_X, 3] Dx,
                       REAL[NUM_X] VarX, REAL[NUM_X, 3] Dxx,
                       REAL dtInv, REAL[NUM_X] uu)
{
  a = {[i] ->        -0.5 * (MuX[i] * Dx[i, 0] + 0.5 * VarX[i] * Dxx[i, 0])};
  b = {[i] -> dtInv - 0.5 * (MuX[i] * Dx[i, 1] + 0.5 * VarX[i] * Dxx[i, 1])};
  c = {[i] ->        -0.5 * (MuX[i] * Dx[i, 2] + 0.5 * VarX[i] * Dxx[i, 2])};

  return tridag(a, b, c, uu);
}

inline
REAL[NUM_Y] implicit_y(REAL[NUM_Y] MuY, REAL[NUM_Y, 3] Dy, 
                       REAL[NUM_Y] VarY, REAL[NUM_Y, 3] Dyy,
                       REAL dtInv, REAL[NUM_Y] yy)
{
  a = {[j] ->        -0.5 *  (MuY[j] * Dy[j, 0] + 0.5 * VarY[j] * Dyy[j, 0])};
  b = {[j] -> dtInv - 0.5 *  (MuY[j] * Dy[j, 1] + 0.5 * VarY[j] * Dyy[j, 1])};
  c = {[j] ->        -0.5 *  (MuY[j] * Dy[j, 2] + 0.5 * VarY[j] * Dyy[j, 2])};

  return tridag(a, b, c, yy);
}

inline
REAL value(REAL strike, int indX, int indY,
           REAL[NUM_X] X, REAL[NUM_Y] Y,
           REAL[NUM_X, 3] Dxx, REAL[NUM_Y, 3] Dyy, 
           REAL[NUM_X, 3] Dx, REAL[NUM_Y, 3] Dy)
{
  MuX = {[j, i] -> 0.0000001 / (tod(NUM_X + i) * tod(NUM_Y + j)) 
                 | [j, i] < [NUM_Y, NUM_X]};
  MuY = {[i, j] -> ALPHA / (tod(i) * tod(NUM_Y) + tod(j) + 1.0)
                 | [i, j] < [NUM_X, NUM_Y]};

  VarY = {[i, j] -> (NU * NU) / tod(i * NUM_Y + j + 1)
                 | [i, j] <  [NUM_X, NUM_Y]};

  ResultE = {[i, j] -> max(X[i] - strike, 0.0) | [i, j] < [NUM_X, NUM_Y]};

  for (t = NUM_T - 2; t >= 0; t--) {
    dtInv = tor(NUM_T - 1) / T;

    VarX = updateParams(X, Y, T * tor(t) / tor(NUM_T - 1));

    /* explicit x */
    U = {[j, i] -> dtInv * ResultE[i, j] + 
          0.5 * ResultE[i    , j] * (MuX[j, i] * Dx[i, 1] + 
                            0.5 * VarX[j, i] * Dxx[i, 1]) +
          0.5 * ResultE[i + 1, j] * (MuX[j, i] * Dx[i, 2] + 
                            0.5 * VarX[j, i] * Dxx[i, 2])
                 | [0, 0] <= [j, i] < [NUM_Y, 1];
         [j, i] -> dtInv * ResultE[i, j] +
          0.5 * ResultE[i - 1, j] * (MuX[j, i] * Dx[i, 0] + 
                            0.5 * VarX[j, i] * Dxx[i, 0]) +
          0.5 * ResultE[i    , j] * (MuX[j, i] * Dx[i, 1] + 
                            0.5 * VarX[j, i] * Dxx[i, 1]) +
          0.5 * ResultE[i + 1, j] * (MuX[j, i] * Dx[i, 2] + 
                            0.5 * VarX[j, i] * Dxx[i, 2])
                 | [0, 1] <= [j, i] < [NUM_Y, NUM_X - 1];
         [j, i] -> dtInv * ResultE[i, j] +
          0.5 * ResultE[i - 1, j] * (MuX[j, i] * Dx[i, 0] + 
                            0.5 * VarX[j, i] * Dxx[i, 0]) +
          0.5 * ResultE[i    , j] * (MuX[j, i] * Dx[i, 1] + 
                            0.5 * VarX[j, i] * Dxx[i, 1])
                 | [0, NUM_X - 1] <= [j, i] < [NUM_Y, NUM_X]
         };

    /* explicit y */
    V = {[i, j] ->  ResultE[i, j    ] * (MuY[i, j] * Dy[j, 1] + 
                          0.5 * VarY[i, j] * Dyy[j, 1]) +
                    ResultE[i, j + 1] * (MuY[i, j] * Dy[j, 2] + 
                          0.5 * VarY[i, j] * Dyy[j, 2])
                 | [0, 0] <= [i, j] < [NUM_X, 1];
         [i, j] ->  ResultE[i, j - 1] * (MuY[i, j] * Dy[j, 0] + 
                          0.5 * VarY[i, j] * Dyy[j, 0]) +
                    ResultE[i, j    ] * (MuY[i, j] * Dy[j, 1] + 
                          0.5 * VarY[i, j] * Dyy[j, 1]) +
                    ResultE[i, j + 1] * (MuY[i, j] * Dy[j, 2] + 
                          0.5 * VarY[i, j] * Dyy[j, 2])
                 | [0, 1] <= [i, j] < [NUM_X, NUM_Y - 1];
         [i, j] ->  ResultE[i, j - 1] * (MuY[i, j] * Dy[j, 0] + 
                          0.5 * VarY[i, j] * Dyy[j, 0]) +
                    ResultE[i, j    ] * (MuY[i, j] * Dy[j, 1] + 
                          0.5 * VarY[i, j] * Dyy[j, 1])
                 | [0, NUM_Y - 1] <= [i, j] < [NUM_X, NUM_Y]
        };

    U = {[j, i] -> U[j, i] + V[i, j]};
  
    /* implicit x */
    U = {[j] -> implicit_x(MuX[j], Dx, VarX[j], Dxx, dtInv, U[j])};

    /* implicit y */
    ResultE = {[i] -> implicit_y(MuY[i], Dy, VarY[i], Dyy, dtInv,
                        {[j] -> dtInv * U[j, i] - V[i, j] / 2.0})};
  }

  return ResultE[indX, indY];
}

int main()
{
  fprintf(stderr, "\n// SaC Volatility Calibration Benchmark:\n");

  itime = getInterval("time", 1);
  start(itime);
  indX, indY, X, Y, Dxx, Dyy, Dx, Dy = initGrid();

  result = {[i] -> value(tor(i) / 1000.0, indX, indY, X, Y, Dxx, Dyy, Dx, Dy)
                 | [i] < [OUTER]};
  end(itime);

    for (i = 0; i < OUTER; i++) {
        fprintf(stderr, "%lf ", result[i]);
    }
    fprintf(stderr, "\n");

  time, unit = returnResultUnit(itime);
  printf("%lf\n", time);

  return 0;
}
